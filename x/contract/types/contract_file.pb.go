// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firmachain/contract/contract_file.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Contract file representation
type ContractFile struct {
	Creator            string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FileHash           string   `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TimeStamp          uint64   `protobuf:"varint,3,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	OwnerList          []string `protobuf:"bytes,4,rep,name=owner_list,json=ownerList,proto3" json:"owner_list,omitempty"`
	MetaDataJsonString string   `protobuf:"bytes,5,opt,name=meta_data_json_string,json=metaDataJsonString,proto3" json:"meta_data_json_string,omitempty"`
}

func (m *ContractFile) Reset()         { *m = ContractFile{} }
func (m *ContractFile) String() string { return proto.CompactTextString(m) }
func (*ContractFile) ProtoMessage()    {}
func (*ContractFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb8c49aee3216b5, []int{0}
}
func (m *ContractFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractFile.Merge(m, src)
}
func (m *ContractFile) XXX_Size() int {
	return m.Size()
}
func (m *ContractFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractFile.DiscardUnknown(m)
}

var xxx_messageInfo_ContractFile proto.InternalMessageInfo

func (m *ContractFile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContractFile) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ContractFile) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *ContractFile) GetOwnerList() []string {
	if m != nil {
		return m.OwnerList
	}
	return nil
}

func (m *ContractFile) GetMetaDataJsonString() string {
	if m != nil {
		return m.MetaDataJsonString
	}
	return ""
}

func init() {
	proto.RegisterType((*ContractFile)(nil), "firmachain.contract.ContractFile")
}

func init() {
	proto.RegisterFile("firmachain/contract/contract_file.proto", fileDescriptor_bdb8c49aee3216b5)
}

var fileDescriptor_bdb8c49aee3216b5 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0x9b, 0x6f, 0xe6, 0x53, 0x1b, 0x5c, 0x45, 0x84, 0x80, 0x18, 0x8a, 0x1b, 0xbb, 0x6a,
	0x15, 0x99, 0x17, 0x50, 0x11, 0x11, 0x41, 0xe8, 0xec, 0xdc, 0x84, 0x3b, 0x35, 0x33, 0x8d, 0xb4,
	0x49, 0x49, 0xae, 0xff, 0xde, 0xc2, 0xa7, 0xf1, 0x19, 0x5c, 0xce, 0xd2, 0xa5, 0xb4, 0x2f, 0x22,
	0x29, 0x8e, 0x33, 0xbb, 0x73, 0x7e, 0xbf, 0x90, 0x0b, 0x87, 0x1e, 0xcf, 0xb5, 0x6b, 0xa0, 0xac,
	0x40, 0x9b, 0xbc, 0xb4, 0x06, 0x1d, 0x94, 0xf8, 0x17, 0xe4, 0x5c, 0xd7, 0x2a, 0x6b, 0x9d, 0x45,
	0xcb, 0xf6, 0xd6, 0x0f, 0xb3, 0x95, 0x3f, 0xfa, 0x20, 0x74, 0xf7, 0xe2, 0xb7, 0x5c, 0xe9, 0x5a,
	0x31, 0x4e, 0xb7, 0x4b, 0xa7, 0x00, 0xad, 0xe3, 0x24, 0x21, 0x69, 0x5c, 0xac, 0x2a, 0x3b, 0xa0,
	0x71, 0xf8, 0x4d, 0x56, 0xe0, 0x2b, 0xfe, 0x6f, 0x70, 0x3b, 0x01, 0x5c, 0x83, 0xaf, 0xd8, 0x21,
	0xa5, 0xa8, 0x1b, 0x25, 0x3d, 0x42, 0xd3, 0xf2, 0x51, 0x42, 0xd2, 0x71, 0x11, 0x07, 0x32, 0x0d,
	0x20, 0x68, 0xfb, 0x62, 0x94, 0x93, 0xb5, 0xf6, 0xc8, 0xc7, 0xc9, 0x28, 0x8d, 0x8b, 0x78, 0x20,
	0xb7, 0xda, 0x23, 0x3b, 0xa5, 0xfb, 0x8d, 0x42, 0x90, 0x0f, 0x80, 0x20, 0x1f, 0xbd, 0x35, 0xd2,
	0xa3, 0xd3, 0x66, 0xc1, 0xff, 0x0f, 0x67, 0x58, 0x90, 0x97, 0x80, 0x70, 0xe3, 0xad, 0x99, 0x0e,
	0xe6, 0xfc, 0xee, 0xb3, 0x13, 0x64, 0xd9, 0x09, 0xf2, 0xdd, 0x09, 0xf2, 0xde, 0x8b, 0x68, 0xd9,
	0x8b, 0xe8, 0xab, 0x17, 0xd1, 0xfd, 0x64, 0xa1, 0xb1, 0x7a, 0x9a, 0x65, 0xa5, 0x6d, 0xf2, 0x8d,
	0x6d, 0x36, 0xe2, 0xf3, 0xc9, 0x24, 0x7f, 0x5d, 0x8f, 0x85, 0x6f, 0xad, 0xf2, 0xb3, 0xad, 0x61,
	0xa5, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x0a, 0xc4, 0x2a, 0x50, 0x01, 0x00, 0x00,
}

func (m *ContractFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetaDataJsonString) > 0 {
		i -= len(m.MetaDataJsonString)
		copy(dAtA[i:], m.MetaDataJsonString)
		i = encodeVarintContractFile(dAtA, i, uint64(len(m.MetaDataJsonString)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerList) > 0 {
		for iNdEx := len(m.OwnerList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerList[iNdEx])
			copy(dAtA[i:], m.OwnerList[iNdEx])
			i = encodeVarintContractFile(dAtA, i, uint64(len(m.OwnerList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TimeStamp != 0 {
		i = encodeVarintContractFile(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintContractFile(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContractFile(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractFile(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractFile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContractFile(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovContractFile(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovContractFile(uint64(m.TimeStamp))
	}
	if len(m.OwnerList) > 0 {
		for _, s := range m.OwnerList {
			l = len(s)
			n += 1 + l + sovContractFile(uint64(l))
		}
	}
	l = len(m.MetaDataJsonString)
	if l > 0 {
		n += 1 + l + sovContractFile(uint64(l))
	}
	return n
}

func sovContractFile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractFile(x uint64) (n int) {
	return sovContractFile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerList = append(m.OwnerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaDataJsonString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaDataJsonString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractFile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractFile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractFile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractFile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractFile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractFile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractFile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractFile = fmt.Errorf("proto: unexpected end of group")
)
