// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firmachain/contract/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIsContractOwnerRequest
type QueryIsContractOwnerRequest struct {
	FileHash     string `protobuf:"bytes,1,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	OwnerAddress string `protobuf:"bytes,2,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
}

func (m *QueryIsContractOwnerRequest) Reset()         { *m = QueryIsContractOwnerRequest{} }
func (m *QueryIsContractOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsContractOwnerRequest) ProtoMessage()    {}
func (*QueryIsContractOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{0}
}
func (m *QueryIsContractOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsContractOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsContractOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsContractOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsContractOwnerRequest.Merge(m, src)
}
func (m *QueryIsContractOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsContractOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsContractOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsContractOwnerRequest proto.InternalMessageInfo

func (m *QueryIsContractOwnerRequest) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *QueryIsContractOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

// QueryIsContractOwnerResponse
type QueryIsContractOwnerResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryIsContractOwnerResponse) Reset()         { *m = QueryIsContractOwnerResponse{} }
func (m *QueryIsContractOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsContractOwnerResponse) ProtoMessage()    {}
func (*QueryIsContractOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{1}
}
func (m *QueryIsContractOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsContractOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsContractOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsContractOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsContractOwnerResponse.Merge(m, src)
}
func (m *QueryIsContractOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsContractOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsContractOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsContractOwnerResponse proto.InternalMessageInfo

func (m *QueryIsContractOwnerResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// QueryGetContractFileRequest
type QueryGetContractFileRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetContractFileRequest) Reset()         { *m = QueryGetContractFileRequest{} }
func (m *QueryGetContractFileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractFileRequest) ProtoMessage()    {}
func (*QueryGetContractFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{2}
}
func (m *QueryGetContractFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractFileRequest.Merge(m, src)
}
func (m *QueryGetContractFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractFileRequest proto.InternalMessageInfo

func (m *QueryGetContractFileRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetContractFileResponse
type QueryGetContractFileResponse struct {
	ContractFile *ContractFile `protobuf:"bytes,1,opt,name=ContractFile,proto3" json:"ContractFile,omitempty"`
}

func (m *QueryGetContractFileResponse) Reset()         { *m = QueryGetContractFileResponse{} }
func (m *QueryGetContractFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractFileResponse) ProtoMessage()    {}
func (*QueryGetContractFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{3}
}
func (m *QueryGetContractFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractFileResponse.Merge(m, src)
}
func (m *QueryGetContractFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractFileResponse proto.InternalMessageInfo

func (m *QueryGetContractFileResponse) GetContractFile() *ContractFile {
	if m != nil {
		return m.ContractFile
	}
	return nil
}

// QueryAllContractFileRequest
type QueryAllContractFileRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractFileRequest) Reset()         { *m = QueryAllContractFileRequest{} }
func (m *QueryAllContractFileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractFileRequest) ProtoMessage()    {}
func (*QueryAllContractFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{4}
}
func (m *QueryAllContractFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractFileRequest.Merge(m, src)
}
func (m *QueryAllContractFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractFileRequest proto.InternalMessageInfo

func (m *QueryAllContractFileRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllContractFileResponse
type QueryAllContractFileResponse struct {
	ContractFile []*ContractFile     `protobuf:"bytes,1,rep,name=ContractFile,proto3" json:"ContractFile,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractFileResponse) Reset()         { *m = QueryAllContractFileResponse{} }
func (m *QueryAllContractFileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractFileResponse) ProtoMessage()    {}
func (*QueryAllContractFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{5}
}
func (m *QueryAllContractFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractFileResponse.Merge(m, src)
}
func (m *QueryAllContractFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractFileResponse proto.InternalMessageInfo

func (m *QueryAllContractFileResponse) GetContractFile() []*ContractFile {
	if m != nil {
		return m.ContractFile
	}
	return nil
}

func (m *QueryAllContractFileResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetContractLogRequest
type QueryGetContractLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetContractLogRequest) Reset()         { *m = QueryGetContractLogRequest{} }
func (m *QueryGetContractLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractLogRequest) ProtoMessage()    {}
func (*QueryGetContractLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{6}
}
func (m *QueryGetContractLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractLogRequest.Merge(m, src)
}
func (m *QueryGetContractLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractLogRequest proto.InternalMessageInfo

func (m *QueryGetContractLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetContractListFromHashRequest
type QueryGetContractListFromHashRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryGetContractListFromHashRequest) Reset()         { *m = QueryGetContractListFromHashRequest{} }
func (m *QueryGetContractListFromHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractListFromHashRequest) ProtoMessage()    {}
func (*QueryGetContractListFromHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{7}
}
func (m *QueryGetContractListFromHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractListFromHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractListFromHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractListFromHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractListFromHashRequest.Merge(m, src)
}
func (m *QueryGetContractListFromHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractListFromHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractListFromHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractListFromHashRequest proto.InternalMessageInfo

func (m *QueryGetContractListFromHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// QueryGetContractLogResponse
type QueryGetContractLogResponse struct {
	ContractLog *ContractLog `protobuf:"bytes,1,opt,name=ContractLog,proto3" json:"ContractLog,omitempty"`
}

func (m *QueryGetContractLogResponse) Reset()         { *m = QueryGetContractLogResponse{} }
func (m *QueryGetContractLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractLogResponse) ProtoMessage()    {}
func (*QueryGetContractLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{8}
}
func (m *QueryGetContractLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractLogResponse.Merge(m, src)
}
func (m *QueryGetContractLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractLogResponse proto.InternalMessageInfo

func (m *QueryGetContractLogResponse) GetContractLog() *ContractLog {
	if m != nil {
		return m.ContractLog
	}
	return nil
}

// QueryGetContractListFromHashResponse
type QueryGetContractListFromHashResponse struct {
	IdList []uint64 `protobuf:"varint,1,rep,packed,name=idList,proto3" json:"idList,omitempty"`
}

func (m *QueryGetContractListFromHashResponse) Reset()         { *m = QueryGetContractListFromHashResponse{} }
func (m *QueryGetContractListFromHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractListFromHashResponse) ProtoMessage()    {}
func (*QueryGetContractListFromHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{9}
}
func (m *QueryGetContractListFromHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractListFromHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractListFromHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractListFromHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractListFromHashResponse.Merge(m, src)
}
func (m *QueryGetContractListFromHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractListFromHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractListFromHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractListFromHashResponse proto.InternalMessageInfo

func (m *QueryGetContractListFromHashResponse) GetIdList() []uint64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

// QueryAllContractLogRequest
type QueryAllContractLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractLogRequest) Reset()         { *m = QueryAllContractLogRequest{} }
func (m *QueryAllContractLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractLogRequest) ProtoMessage()    {}
func (*QueryAllContractLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{10}
}
func (m *QueryAllContractLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractLogRequest.Merge(m, src)
}
func (m *QueryAllContractLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractLogRequest proto.InternalMessageInfo

func (m *QueryAllContractLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllContractLogResponse
type QueryAllContractLogResponse struct {
	ContractLog []*ContractLog      `protobuf:"bytes,1,rep,name=ContractLog,proto3" json:"ContractLog,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractLogResponse) Reset()         { *m = QueryAllContractLogResponse{} }
func (m *QueryAllContractLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractLogResponse) ProtoMessage()    {}
func (*QueryAllContractLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c414dafdf9443be, []int{11}
}
func (m *QueryAllContractLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractLogResponse.Merge(m, src)
}
func (m *QueryAllContractLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractLogResponse proto.InternalMessageInfo

func (m *QueryAllContractLogResponse) GetContractLog() []*ContractLog {
	if m != nil {
		return m.ContractLog
	}
	return nil
}

func (m *QueryAllContractLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryIsContractOwnerRequest)(nil), "firmachain.contract.QueryIsContractOwnerRequest")
	proto.RegisterType((*QueryIsContractOwnerResponse)(nil), "firmachain.contract.QueryIsContractOwnerResponse")
	proto.RegisterType((*QueryGetContractFileRequest)(nil), "firmachain.contract.QueryGetContractFileRequest")
	proto.RegisterType((*QueryGetContractFileResponse)(nil), "firmachain.contract.QueryGetContractFileResponse")
	proto.RegisterType((*QueryAllContractFileRequest)(nil), "firmachain.contract.QueryAllContractFileRequest")
	proto.RegisterType((*QueryAllContractFileResponse)(nil), "firmachain.contract.QueryAllContractFileResponse")
	proto.RegisterType((*QueryGetContractLogRequest)(nil), "firmachain.contract.QueryGetContractLogRequest")
	proto.RegisterType((*QueryGetContractListFromHashRequest)(nil), "firmachain.contract.QueryGetContractListFromHashRequest")
	proto.RegisterType((*QueryGetContractLogResponse)(nil), "firmachain.contract.QueryGetContractLogResponse")
	proto.RegisterType((*QueryGetContractListFromHashResponse)(nil), "firmachain.contract.QueryGetContractListFromHashResponse")
	proto.RegisterType((*QueryAllContractLogRequest)(nil), "firmachain.contract.QueryAllContractLogRequest")
	proto.RegisterType((*QueryAllContractLogResponse)(nil), "firmachain.contract.QueryAllContractLogResponse")
}

func init() { proto.RegisterFile("firmachain/contract/query.proto", fileDescriptor_0c414dafdf9443be) }

var fileDescriptor_0c414dafdf9443be = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xc7, 0x99, 0xf2, 0x11, 0x1c, 0x08, 0x24, 0xa3, 0x51, 0xb2, 0x92, 0x8a, 0xa3, 0x01, 0xa3,
	0xb8, 0xd3, 0xf2, 0x25, 0xc4, 0x8f, 0x04, 0x88, 0xa0, 0x09, 0x09, 0xda, 0x4b, 0x13, 0x63, 0xb6,
	0xdd, 0x61, 0x3b, 0xc9, 0x76, 0xa7, 0xec, 0x4c, 0x11, 0x42, 0xb8, 0xf1, 0x09, 0x4c, 0x7c, 0x09,
	0x43, 0x8c, 0xc6, 0xb7, 0x30, 0x5e, 0x91, 0x70, 0xe3, 0xa5, 0x01, 0x1f, 0xc4, 0xec, 0xec, 0x2c,
	0xdd, 0xa5, 0xdb, 0xa5, 0x25, 0xdc, 0x75, 0x76, 0xcf, 0xff, 0x9c, 0xdf, 0x9c, 0x73, 0xf6, 0x9f,
	0xc2, 0x3b, 0x5b, 0xcc, 0xaf, 0x59, 0x95, 0xaa, 0xc5, 0x3c, 0x52, 0xe1, 0x9e, 0xf4, 0xad, 0x8a,
	0x24, 0xdb, 0x0d, 0xea, 0xef, 0x99, 0x75, 0x9f, 0x4b, 0x8e, 0xae, 0x37, 0x03, 0xcc, 0x28, 0xc0,
	0x18, 0x77, 0x38, 0x77, 0x5c, 0x4a, 0xac, 0x3a, 0x23, 0x96, 0xe7, 0x71, 0x69, 0x49, 0xc6, 0x3d,
	0x11, 0x4a, 0x8c, 0x87, 0x15, 0x2e, 0x6a, 0x5c, 0x90, 0xb2, 0x25, 0x68, 0x98, 0x8b, 0xec, 0x14,
	0xcb, 0x54, 0x5a, 0x45, 0x52, 0xb7, 0x1c, 0xe6, 0xa9, 0x60, 0x1d, 0x3b, 0x95, 0x56, 0x3f, 0xfa,
	0xf1, 0x61, 0x8b, 0xb9, 0x54, 0x07, 0x4e, 0x66, 0x06, 0xba, 0xdc, 0x09, 0xe3, 0xf0, 0x7b, 0x78,
	0xfb, 0x6d, 0x50, 0xf2, 0xb5, 0x58, 0xd5, 0x2f, 0x37, 0x3f, 0x7a, 0xd4, 0x2f, 0xd1, 0xed, 0x06,
	0x15, 0x12, 0x19, 0x70, 0x30, 0x48, 0xfa, 0xca, 0x12, 0xd5, 0x31, 0x30, 0x01, 0x1e, 0x5c, 0x2b,
	0x9d, 0x9d, 0x11, 0x86, 0xc3, 0x3c, 0x88, 0x5d, 0xb6, 0x6d, 0x9f, 0x0a, 0x31, 0x96, 0x53, 0xef,
	0x13, 0xcf, 0xf0, 0x02, 0x1c, 0x4f, 0x4f, 0x2f, 0xea, 0xdc, 0x13, 0x14, 0xdd, 0x84, 0x03, 0x3e,
	0x15, 0x0d, 0x57, 0xaa, 0xec, 0x83, 0x25, 0x7d, 0xc2, 0xb3, 0x1a, 0x6b, 0x9d, 0xca, 0x48, 0xb8,
	0xc6, 0x5c, 0x1a, 0x61, 0xdd, 0x80, 0xfd, 0xcc, 0xb3, 0xe9, 0xae, 0x66, 0x0a, 0x0f, 0x98, 0xea,
	0x62, 0x2d, 0x22, 0x5d, 0xec, 0x25, 0x1c, 0x8e, 0x3f, 0x57, 0xe2, 0xa1, 0x99, 0xbb, 0x66, 0xca,
	0xc8, 0xcc, 0x44, 0x82, 0x84, 0x0c, 0x53, 0xcd, 0xb6, 0xec, 0xba, 0x69, 0x6c, 0x6b, 0x10, 0x36,
	0xc7, 0xa6, 0x6b, 0x4c, 0x9a, 0xe1, 0x8c, 0xcd, 0x60, 0xc6, 0x66, 0xb8, 0x2f, 0x7a, 0xc6, 0xe6,
	0x1b, 0xcb, 0x89, 0xb4, 0xa5, 0x98, 0x12, 0x7f, 0x07, 0xfa, 0x3a, 0x2d, 0x75, 0xda, 0x5e, 0xa7,
	0xf7, 0x12, 0xd7, 0x41, 0xeb, 0x09, 0xde, 0x9c, 0xe2, 0x9d, 0xba, 0x90, 0x37, 0x64, 0x48, 0x00,
	0x4f, 0x43, 0xe3, 0x7c, 0xfb, 0x37, 0xb8, 0x13, 0xb5, 0x65, 0x04, 0xe6, 0x98, 0xad, 0xda, 0xd1,
	0x57, 0xca, 0x31, 0x1b, 0x2f, 0xc1, 0x7b, 0x2d, 0xd1, 0x4c, 0xc8, 0x35, 0x9f, 0xd7, 0x82, 0xed,
	0x8a, 0x64, 0x08, 0xf6, 0x55, 0x9b, 0xcb, 0xa7, 0x7e, 0x63, 0xab, 0x75, 0x39, 0x54, 0x21, 0xdd,
	0x97, 0x15, 0x38, 0x14, 0x7b, 0xac, 0x27, 0x30, 0x91, 0xd9, 0x96, 0x40, 0x1e, 0x17, 0xe1, 0x17,
	0xf0, 0x7e, 0x36, 0x5d, 0x73, 0x7f, 0x99, 0x1d, 0xbc, 0x51, 0xdd, 0xef, 0x2b, 0xe9, 0x13, 0xb6,
	0x75, 0x2f, 0x62, 0xb3, 0x8b, 0xf5, 0xe2, 0xaa, 0x56, 0xe4, 0x10, 0xb4, 0xae, 0x62, 0x66, 0x27,
	0x7a, 0xbb, 0xee, 0xc4, 0x95, 0xad, 0xc7, 0xcc, 0xef, 0x41, 0xd8, 0xaf, 0x60, 0xd1, 0x0f, 0x00,
	0x47, 0xcf, 0x19, 0x02, 0x2a, 0xa4, 0x52, 0x65, 0x58, 0x93, 0x51, 0xec, 0x42, 0x11, 0xe2, 0xe0,
	0x27, 0x9f, 0x8e, 0xff, 0x7d, 0xc9, 0x15, 0x11, 0x21, 0x31, 0x77, 0x4c, 0x33, 0x4a, 0x76, 0x8e,
	0xee, 0x27, 0x48, 0x7e, 0x6b, 0x59, 0xb8, 0xe9, 0x96, 0x95, 0x85, 0xdb, 0xc6, 0xaf, 0xf0, 0x33,
	0x85, 0xbb, 0x80, 0xe6, 0x2e, 0xc2, 0xad, 0xc4, 0xd4, 0x64, 0x5f, 0x99, 0xe1, 0x01, 0xfa, 0x06,
	0xe0, 0x68, 0x3c, 0xed, 0xb2, 0xeb, 0x66, 0x61, 0xa7, 0xbb, 0x59, 0x16, 0x76, 0x1b, 0x5f, 0xc2,
	0x73, 0x0a, 0xdb, 0x44, 0xd3, 0xdd, 0x60, 0xa3, 0x63, 0x00, 0x6f, 0xb5, 0xf9, 0xda, 0xd0, 0x62,
	0x47, 0xbd, 0x4b, 0xb1, 0x0f, 0x63, 0xe9, 0x12, 0x4a, 0x7d, 0x8d, 0x55, 0x75, 0x8d, 0xe7, 0xe8,
	0xe9, 0x45, 0xd7, 0x48, 0xcb, 0x42, 0xf6, 0x03, 0xa7, 0x3a, 0x40, 0x87, 0x20, 0xf1, 0x09, 0x22,
	0xd2, 0x19, 0xcf, 0x99, 0x55, 0x18, 0x85, 0xce, 0x05, 0x9a, 0x7b, 0x51, 0x71, 0xcf, 0xa0, 0x42,
	0xa7, 0xed, 0xdf, 0xe0, 0x0e, 0xd9, 0x67, 0xf6, 0x01, 0xfa, 0x0a, 0xe0, 0x48, 0x2c, 0x63, 0xb0,
	0x30, 0xa4, 0xa3, 0xf1, 0x77, 0xc6, 0x9b, 0x6e, 0x52, 0x78, 0x56, 0xf1, 0x3e, 0x46, 0x8f, 0xba,
	0xe0, 0x5d, 0xd9, 0xfc, 0x75, 0x92, 0x07, 0x47, 0x27, 0x79, 0xf0, 0xf7, 0x24, 0x0f, 0x3e, 0x9f,
	0xe6, 0x7b, 0x8e, 0x4e, 0xf3, 0x3d, 0x7f, 0x4e, 0xf3, 0x3d, 0xef, 0xe6, 0x1d, 0x26, 0xab, 0x8d,
	0xb2, 0x59, 0xe1, 0xb5, 0x36, 0x09, 0x77, 0x0a, 0xf3, 0x64, 0xb7, 0x99, 0x56, 0xee, 0xd5, 0xa9,
	0x28, 0x0f, 0xa8, 0xbf, 0x43, 0xb3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x40, 0x5e, 0x96,
	0xe1, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of isContractOwner items.
	IsContractOwner(ctx context.Context, in *QueryIsContractOwnerRequest, opts ...grpc.CallOption) (*QueryIsContractOwnerResponse, error)
	// Queries a contractFile by index.
	ContractFile(ctx context.Context, in *QueryGetContractFileRequest, opts ...grpc.CallOption) (*QueryGetContractFileResponse, error)
	// Queries a list of contractFile items.
	ContractFileAll(ctx context.Context, in *QueryAllContractFileRequest, opts ...grpc.CallOption) (*QueryAllContractFileResponse, error)
	// Queries a contractLog by hash
	GetContractListFromHash(ctx context.Context, in *QueryGetContractListFromHashRequest, opts ...grpc.CallOption) (*QueryGetContractListFromHashResponse, error)
	// Queries a contractLog by id.
	ContractLog(ctx context.Context, in *QueryGetContractLogRequest, opts ...grpc.CallOption) (*QueryGetContractLogResponse, error)
	// Queries a list of contractLog items.
	ContractLogAll(ctx context.Context, in *QueryAllContractLogRequest, opts ...grpc.CallOption) (*QueryAllContractLogResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsContractOwner(ctx context.Context, in *QueryIsContractOwnerRequest, opts ...grpc.CallOption) (*QueryIsContractOwnerResponse, error) {
	out := new(QueryIsContractOwnerResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/IsContractOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractFile(ctx context.Context, in *QueryGetContractFileRequest, opts ...grpc.CallOption) (*QueryGetContractFileResponse, error) {
	out := new(QueryGetContractFileResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/ContractFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractFileAll(ctx context.Context, in *QueryAllContractFileRequest, opts ...grpc.CallOption) (*QueryAllContractFileResponse, error) {
	out := new(QueryAllContractFileResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/ContractFileAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetContractListFromHash(ctx context.Context, in *QueryGetContractListFromHashRequest, opts ...grpc.CallOption) (*QueryGetContractListFromHashResponse, error) {
	out := new(QueryGetContractListFromHashResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/GetContractListFromHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractLog(ctx context.Context, in *QueryGetContractLogRequest, opts ...grpc.CallOption) (*QueryGetContractLogResponse, error) {
	out := new(QueryGetContractLogResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/ContractLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractLogAll(ctx context.Context, in *QueryAllContractLogRequest, opts ...grpc.CallOption) (*QueryAllContractLogResponse, error) {
	out := new(QueryAllContractLogResponse)
	err := c.cc.Invoke(ctx, "/firmachain.contract.Query/ContractLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of isContractOwner items.
	IsContractOwner(context.Context, *QueryIsContractOwnerRequest) (*QueryIsContractOwnerResponse, error)
	// Queries a contractFile by index.
	ContractFile(context.Context, *QueryGetContractFileRequest) (*QueryGetContractFileResponse, error)
	// Queries a list of contractFile items.
	ContractFileAll(context.Context, *QueryAllContractFileRequest) (*QueryAllContractFileResponse, error)
	// Queries a contractLog by hash
	GetContractListFromHash(context.Context, *QueryGetContractListFromHashRequest) (*QueryGetContractListFromHashResponse, error)
	// Queries a contractLog by id.
	ContractLog(context.Context, *QueryGetContractLogRequest) (*QueryGetContractLogResponse, error)
	// Queries a list of contractLog items.
	ContractLogAll(context.Context, *QueryAllContractLogRequest) (*QueryAllContractLogResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IsContractOwner(ctx context.Context, req *QueryIsContractOwnerRequest) (*QueryIsContractOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsContractOwner not implemented")
}
func (*UnimplementedQueryServer) ContractFile(ctx context.Context, req *QueryGetContractFileRequest) (*QueryGetContractFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractFile not implemented")
}
func (*UnimplementedQueryServer) ContractFileAll(ctx context.Context, req *QueryAllContractFileRequest) (*QueryAllContractFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractFileAll not implemented")
}
func (*UnimplementedQueryServer) GetContractListFromHash(ctx context.Context, req *QueryGetContractListFromHashRequest) (*QueryGetContractListFromHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractListFromHash not implemented")
}
func (*UnimplementedQueryServer) ContractLog(ctx context.Context, req *QueryGetContractLogRequest) (*QueryGetContractLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractLog not implemented")
}
func (*UnimplementedQueryServer) ContractLogAll(ctx context.Context, req *QueryAllContractLogRequest) (*QueryAllContractLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractLogAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IsContractOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsContractOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsContractOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/IsContractOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsContractOwner(ctx, req.(*QueryIsContractOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/ContractFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractFile(ctx, req.(*QueryGetContractFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractFileAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractFileAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/ContractFileAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractFileAll(ctx, req.(*QueryAllContractFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetContractListFromHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractListFromHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetContractListFromHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/GetContractListFromHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetContractListFromHash(ctx, req.(*QueryGetContractListFromHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/ContractLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractLog(ctx, req.(*QueryGetContractLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.contract.Query/ContractLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractLogAll(ctx, req.(*QueryAllContractLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "firmachain.contract.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsContractOwner",
			Handler:    _Query_IsContractOwner_Handler,
		},
		{
			MethodName: "ContractFile",
			Handler:    _Query_ContractFile_Handler,
		},
		{
			MethodName: "ContractFileAll",
			Handler:    _Query_ContractFileAll_Handler,
		},
		{
			MethodName: "GetContractListFromHash",
			Handler:    _Query_GetContractListFromHash_Handler,
		},
		{
			MethodName: "ContractLog",
			Handler:    _Query_ContractLog_Handler,
		},
		{
			MethodName: "ContractLogAll",
			Handler:    _Query_ContractLogAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firmachain/contract/query.proto",
}

func (m *QueryIsContractOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsContractOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsContractOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsContractOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsContractOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsContractOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractFile != nil {
		{
			size, err := m.ContractFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractFile) > 0 {
		for iNdEx := len(m.ContractFile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractFile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractListFromHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractListFromHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractListFromHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractLog != nil {
		{
			size, err := m.ContractLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractListFromHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractListFromHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractListFromHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdList) > 0 {
		dAtA6 := make([]byte, len(m.IdList)*10)
		var j5 int
		for _, num := range m.IdList {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractLog) > 0 {
		for iNdEx := len(m.ContractLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIsContractOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsContractOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *QueryGetContractFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractFile != nil {
		l = m.ContractFile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractFile) > 0 {
		for _, e := range m.ContractFile {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetContractListFromHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractLog != nil {
		l = m.ContractLog.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractListFromHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		l = 0
		for _, e := range m.IdList {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryAllContractLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractLog) > 0 {
		for _, e := range m.ContractLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIsContractOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsContractOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsContractOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsContractOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsContractOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsContractOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractFile == nil {
				m.ContractFile = &ContractFile{}
			}
			if err := m.ContractFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractFile = append(m.ContractFile, &ContractFile{})
			if err := m.ContractFile[len(m.ContractFile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractListFromHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractListFromHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractListFromHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractLog == nil {
				m.ContractLog = &ContractLog{}
			}
			if err := m.ContractLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractListFromHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractListFromHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractListFromHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractLog = append(m.ContractLog, &ContractLog{})
			if err := m.ContractLog[len(m.ContractLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
