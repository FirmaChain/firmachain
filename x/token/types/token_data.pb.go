// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firmachain/token/token_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenData struct {
	TokenID      string `protobuf:"bytes,1,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TokenURI     string `protobuf:"bytes,4,opt,name=tokenURI,proto3" json:"tokenURI,omitempty"`
	TotalSupply  uint64 `protobuf:"varint,5,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
	Decimal      uint64 `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Mintable     bool   `protobuf:"varint,7,opt,name=mintable,proto3" json:"mintable,omitempty"`
	Burnable     bool   `protobuf:"varint,8,opt,name=burnable,proto3" json:"burnable,omitempty"`
	MintSequence uint64 `protobuf:"varint,9,opt,name=mintSequence,proto3" json:"mintSequence,omitempty"`
	BurnSequence uint64 `protobuf:"varint,10,opt,name=burnSequence,proto3" json:"burnSequence,omitempty"`
	Owner        string `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *TokenData) Reset()         { *m = TokenData{} }
func (m *TokenData) String() string { return proto.CompactTextString(m) }
func (*TokenData) ProtoMessage()    {}
func (*TokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc9e2b5462ecab2, []int{0}
}
func (m *TokenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenData.Merge(m, src)
}
func (m *TokenData) XXX_Size() int {
	return m.Size()
}
func (m *TokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenData.DiscardUnknown(m)
}

var xxx_messageInfo_TokenData proto.InternalMessageInfo

func (m *TokenData) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *TokenData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenData) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenData) GetTokenURI() string {
	if m != nil {
		return m.TokenURI
	}
	return ""
}

func (m *TokenData) GetTotalSupply() uint64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

func (m *TokenData) GetDecimal() uint64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *TokenData) GetMintable() bool {
	if m != nil {
		return m.Mintable
	}
	return false
}

func (m *TokenData) GetBurnable() bool {
	if m != nil {
		return m.Burnable
	}
	return false
}

func (m *TokenData) GetMintSequence() uint64 {
	if m != nil {
		return m.MintSequence
	}
	return 0
}

func (m *TokenData) GetBurnSequence() uint64 {
	if m != nil {
		return m.BurnSequence
	}
	return 0
}

func (m *TokenData) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenData)(nil), "firmachain.token.TokenData")
}

func init() { proto.RegisterFile("firmachain/token/token_data.proto", fileDescriptor_cfc9e2b5462ecab2) }

var fileDescriptor_cfc9e2b5462ecab2 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0xeb, 0xd2, 0xa6, 0x89, 0xcb, 0x80, 0x2c, 0x84, 0x2c, 0x06, 0x2b, 0x74, 0xca, 0x94,
	0x0e, 0xdc, 0x00, 0x75, 0xa0, 0x6b, 0x0a, 0x0b, 0x0b, 0x72, 0x52, 0x43, 0x23, 0x62, 0x3b, 0xa4,
	0x8e, 0x20, 0xb7, 0xe0, 0x46, 0xac, 0x8c, 0x1d, 0x19, 0x51, 0x72, 0x11, 0xe4, 0x3f, 0x4d, 0x08,
	0x8b, 0xf5, 0x7f, 0xef, 0x3d, 0xff, 0xb2, 0xf5, 0xf0, 0xd5, 0x53, 0x5a, 0x48, 0x9e, 0xec, 0x78,
	0xaa, 0x96, 0x46, 0xbf, 0x88, 0xe3, 0xf9, 0xb8, 0xe5, 0x86, 0x87, 0x79, 0xa1, 0x8d, 0x26, 0x67,
	0x7f, 0x91, 0x10, 0xcc, 0xc5, 0xe7, 0x18, 0x7b, 0x77, 0x76, 0x5a, 0x71, 0xc3, 0x09, 0xc5, 0x33,
	0x90, 0xd7, 0x2b, 0x8a, 0x7c, 0x14, 0x78, 0x51, 0x87, 0x84, 0xe0, 0x89, 0xe2, 0x52, 0xd0, 0x31,
	0xc8, 0x30, 0x93, 0x0b, 0xec, 0xec, 0x2b, 0x19, 0xeb, 0x8c, 0x9e, 0x80, 0x7a, 0x24, 0x72, 0x89,
	0x5d, 0xb8, 0x76, 0x1f, 0xad, 0xe9, 0x04, 0x9c, 0x9e, 0x89, 0x8f, 0xe7, 0x46, 0x1b, 0x9e, 0x6d,
	0xca, 0x3c, 0xcf, 0x2a, 0x3a, 0xf5, 0x51, 0x30, 0x89, 0x86, 0x92, 0x7d, 0xc3, 0x56, 0x24, 0xa9,
	0xe4, 0x19, 0x75, 0xc0, 0xed, 0xd0, 0xee, 0x95, 0xa9, 0x32, 0x3c, 0xce, 0x04, 0x9d, 0xf9, 0x28,
	0x70, 0xa3, 0x9e, 0xad, 0x17, 0x97, 0x85, 0x02, 0xcf, 0x6d, 0xbd, 0x8e, 0xc9, 0x02, 0x9f, 0xda,
	0xdc, 0x46, 0xbc, 0x96, 0x42, 0x25, 0x82, 0x7a, 0xb0, 0xf6, 0x9f, 0x66, 0x33, 0x36, 0xdf, 0x67,
	0x70, 0x9b, 0x19, 0x6a, 0xe4, 0x1c, 0x4f, 0xf5, 0x9b, 0x12, 0x05, 0x9d, 0xc3, 0xa7, 0x5a, 0xb8,
	0xb9, 0xfd, 0xaa, 0x19, 0x3a, 0xd4, 0x0c, 0xfd, 0xd4, 0x0c, 0x7d, 0x34, 0x6c, 0x74, 0x68, 0xd8,
	0xe8, 0xbb, 0x61, 0xa3, 0x87, 0xf0, 0x39, 0x35, 0xbb, 0x32, 0x0e, 0x13, 0x2d, 0x97, 0x83, 0x6e,
	0x06, 0xe3, 0x7b, 0x57, 0x54, 0x95, 0x8b, 0x7d, 0xec, 0x40, 0x49, 0xd7, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xec, 0x35, 0xe3, 0xc1, 0xc9, 0x01, 0x00, 0x00,
}

func (m *TokenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTokenData(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BurnSequence != 0 {
		i = encodeVarintTokenData(dAtA, i, uint64(m.BurnSequence))
		i--
		dAtA[i] = 0x50
	}
	if m.MintSequence != 0 {
		i = encodeVarintTokenData(dAtA, i, uint64(m.MintSequence))
		i--
		dAtA[i] = 0x48
	}
	if m.Burnable {
		i--
		if m.Burnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Mintable {
		i--
		if m.Mintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Decimal != 0 {
		i = encodeVarintTokenData(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalSupply != 0 {
		i = encodeVarintTokenData(dAtA, i, uint64(m.TotalSupply))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenURI) > 0 {
		i -= len(m.TokenURI)
		copy(dAtA[i:], m.TokenURI)
		i = encodeVarintTokenData(dAtA, i, uint64(len(m.TokenURI)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTokenData(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTokenData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintTokenData(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenData(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovTokenData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTokenData(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTokenData(uint64(l))
	}
	l = len(m.TokenURI)
	if l > 0 {
		n += 1 + l + sovTokenData(uint64(l))
	}
	if m.TotalSupply != 0 {
		n += 1 + sovTokenData(uint64(m.TotalSupply))
	}
	if m.Decimal != 0 {
		n += 1 + sovTokenData(uint64(m.Decimal))
	}
	if m.Mintable {
		n += 2
	}
	if m.Burnable {
		n += 2
	}
	if m.MintSequence != 0 {
		n += 1 + sovTokenData(uint64(m.MintSequence))
	}
	if m.BurnSequence != 0 {
		n += 1 + sovTokenData(uint64(m.BurnSequence))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTokenData(uint64(l))
	}
	return n
}

func sovTokenData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenData(x uint64) (n int) {
	return sovTokenData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mintable = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Burnable = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintSequence", wireType)
			}
			m.MintSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnSequence", wireType)
			}
			m.BurnSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenData = fmt.Errorf("proto: unexpected end of group")
)
