// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryNftIdListOfOwnerRequest struct {
	OwnerAddress string             `protobuf:"bytes,1,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftIdListOfOwnerRequest) Reset()         { *m = QueryNftIdListOfOwnerRequest{} }
func (m *QueryNftIdListOfOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftIdListOfOwnerRequest) ProtoMessage()    {}
func (*QueryNftIdListOfOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{0}
}
func (m *QueryNftIdListOfOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftIdListOfOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftIdListOfOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftIdListOfOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftIdListOfOwnerRequest.Merge(m, src)
}
func (m *QueryNftIdListOfOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftIdListOfOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftIdListOfOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftIdListOfOwnerRequest proto.InternalMessageInfo

func (m *QueryNftIdListOfOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *QueryNftIdListOfOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftIdListOfOwnerResponse struct {
	NftIdList  []uint64            `protobuf:"varint,1,rep,packed,name=nftIdList,proto3" json:"nftIdList,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftIdListOfOwnerResponse) Reset()         { *m = QueryNftIdListOfOwnerResponse{} }
func (m *QueryNftIdListOfOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftIdListOfOwnerResponse) ProtoMessage()    {}
func (*QueryNftIdListOfOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{1}
}
func (m *QueryNftIdListOfOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftIdListOfOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftIdListOfOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftIdListOfOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftIdListOfOwnerResponse.Merge(m, src)
}
func (m *QueryNftIdListOfOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftIdListOfOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftIdListOfOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftIdListOfOwnerResponse proto.InternalMessageInfo

func (m *QueryNftIdListOfOwnerResponse) GetNftIdList() []uint64 {
	if m != nil {
		return m.NftIdList
	}
	return nil
}

func (m *QueryNftIdListOfOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBalanceOfRequest struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
}

func (m *QueryBalanceOfRequest) Reset()         { *m = QueryBalanceOfRequest{} }
func (m *QueryBalanceOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfRequest) ProtoMessage()    {}
func (*QueryBalanceOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{2}
}
func (m *QueryBalanceOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfRequest.Merge(m, src)
}
func (m *QueryBalanceOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfRequest proto.InternalMessageInfo

func (m *QueryBalanceOfRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

type QueryBalanceOfResponse struct {
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *QueryBalanceOfResponse) Reset()         { *m = QueryBalanceOfResponse{} }
func (m *QueryBalanceOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfResponse) ProtoMessage()    {}
func (*QueryBalanceOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{3}
}
func (m *QueryBalanceOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfResponse.Merge(m, src)
}
func (m *QueryBalanceOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfResponse proto.InternalMessageInfo

func (m *QueryBalanceOfResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type QueryGetNftItemRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetNftItemRequest) Reset()         { *m = QueryGetNftItemRequest{} }
func (m *QueryGetNftItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftItemRequest) ProtoMessage()    {}
func (*QueryGetNftItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{4}
}
func (m *QueryGetNftItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftItemRequest.Merge(m, src)
}
func (m *QueryGetNftItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftItemRequest proto.InternalMessageInfo

func (m *QueryGetNftItemRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetNftItemResponse struct {
	NftItem *NftItem `protobuf:"bytes,1,opt,name=NftItem,proto3" json:"NftItem,omitempty"`
}

func (m *QueryGetNftItemResponse) Reset()         { *m = QueryGetNftItemResponse{} }
func (m *QueryGetNftItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftItemResponse) ProtoMessage()    {}
func (*QueryGetNftItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{5}
}
func (m *QueryGetNftItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftItemResponse.Merge(m, src)
}
func (m *QueryGetNftItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftItemResponse proto.InternalMessageInfo

func (m *QueryGetNftItemResponse) GetNftItem() *NftItem {
	if m != nil {
		return m.NftItem
	}
	return nil
}

type QueryAllNftItemRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftItemRequest) Reset()         { *m = QueryAllNftItemRequest{} }
func (m *QueryAllNftItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftItemRequest) ProtoMessage()    {}
func (*QueryAllNftItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{6}
}
func (m *QueryAllNftItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftItemRequest.Merge(m, src)
}
func (m *QueryAllNftItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftItemRequest proto.InternalMessageInfo

func (m *QueryAllNftItemRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNftItemResponse struct {
	NftItem    []*NftItem          `protobuf:"bytes,1,rep,name=NftItem,proto3" json:"NftItem,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftItemResponse) Reset()         { *m = QueryAllNftItemResponse{} }
func (m *QueryAllNftItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftItemResponse) ProtoMessage()    {}
func (*QueryAllNftItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce02d034d3adf2e9, []int{7}
}
func (m *QueryAllNftItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftItemResponse.Merge(m, src)
}
func (m *QueryAllNftItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftItemResponse proto.InternalMessageInfo

func (m *QueryAllNftItemResponse) GetNftItem() []*NftItem {
	if m != nil {
		return m.NftItem
	}
	return nil
}

func (m *QueryAllNftItemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryNftIdListOfOwnerRequest)(nil), "firmachain.firmachain.nft.QueryNftIdListOfOwnerRequest")
	proto.RegisterType((*QueryNftIdListOfOwnerResponse)(nil), "firmachain.firmachain.nft.QueryNftIdListOfOwnerResponse")
	proto.RegisterType((*QueryBalanceOfRequest)(nil), "firmachain.firmachain.nft.QueryBalanceOfRequest")
	proto.RegisterType((*QueryBalanceOfResponse)(nil), "firmachain.firmachain.nft.QueryBalanceOfResponse")
	proto.RegisterType((*QueryGetNftItemRequest)(nil), "firmachain.firmachain.nft.QueryGetNftItemRequest")
	proto.RegisterType((*QueryGetNftItemResponse)(nil), "firmachain.firmachain.nft.QueryGetNftItemResponse")
	proto.RegisterType((*QueryAllNftItemRequest)(nil), "firmachain.firmachain.nft.QueryAllNftItemRequest")
	proto.RegisterType((*QueryAllNftItemResponse)(nil), "firmachain.firmachain.nft.QueryAllNftItemResponse")
}

func init() { proto.RegisterFile("nft/query.proto", fileDescriptor_ce02d034d3adf2e9) }

var fileDescriptor_ce02d034d3adf2e9 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xbf, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xe3, 0xb4, 0x01, 0xc5, 0x45, 0x80, 0x2c, 0x7e, 0x84, 0x28, 0x9c, 0x22, 0xab, 0x6a,
	0x43, 0x29, 0x3e, 0x92, 0x0e, 0x20, 0xc1, 0x92, 0x0e, 0xad, 0x90, 0x10, 0x81, 0x2c, 0x48, 0x2c,
	0xe0, 0xe4, 0x7c, 0xa9, 0xa5, 0x3b, 0x3b, 0x8d, 0x1d, 0xa0, 0x42, 0x2c, 0x0c, 0x0c, 0x4c, 0x48,
	0xec, 0xfc, 0x98, 0xf9, 0x0f, 0xf8, 0x0b, 0x18, 0x2b, 0xb1, 0x30, 0xa2, 0x84, 0x3f, 0x04, 0xc5,
	0xe7, 0xfc, 0x6e, 0x72, 0x3a, 0xd4, 0xed, 0xfc, 0xf2, 0xbe, 0xdf, 0xf7, 0xb1, 0xdf, 0x7b, 0x0a,
	0xbc, 0x20, 0x7c, 0xed, 0x1e, 0x76, 0x59, 0xe7, 0x88, 0xb4, 0x3b, 0x52, 0x4b, 0x74, 0xcd, 0xe7,
	0x9d, 0x90, 0x36, 0x0f, 0x28, 0x17, 0x64, 0xe2, 0x53, 0xf8, 0x3a, 0x5f, 0x68, 0x49, 0xd9, 0x0a,
	0x98, 0x4b, 0xdb, 0xdc, 0xa5, 0x42, 0x48, 0x4d, 0x35, 0x97, 0x42, 0x45, 0xc2, 0xfc, 0x56, 0x53,
	0xaa, 0x50, 0x2a, 0xb7, 0x41, 0x15, 0x8b, 0x1c, 0xdd, 0x97, 0xe5, 0x06, 0xd3, 0xb4, 0xec, 0xb6,
	0x69, 0x8b, 0x0b, 0x93, 0x6c, 0x73, 0xd1, 0xa0, 0xaa, 0xf0, 0xf5, 0x73, 0xae, 0x59, 0x18, 0xc5,
	0xf0, 0x07, 0x00, 0x0b, 0x4f, 0x06, 0xb2, 0x47, 0xbe, 0x7e, 0xe0, 0x3d, 0xe4, 0x4a, 0xd7, 0xfc,
	0xda, 0x2b, 0xc1, 0x3a, 0x75, 0x76, 0xd8, 0x65, 0x4a, 0x23, 0x0c, 0xcf, 0xc9, 0xc1, 0xb9, 0xea,
	0x79, 0x1d, 0xa6, 0x54, 0x0e, 0x14, 0x41, 0x29, 0x5b, 0x9f, 0x8a, 0xa1, 0x3d, 0x08, 0xc7, 0xc5,
	0x72, 0xe9, 0x22, 0x28, 0xad, 0x55, 0x36, 0x48, 0x44, 0x46, 0x06, 0x64, 0x24, 0xba, 0xab, 0x25,
	0x23, 0x8f, 0x69, 0x8b, 0x59, 0xff, 0xfa, 0x84, 0x12, 0xbf, 0x07, 0xf0, 0xfa, 0x02, 0x18, 0xd5,
	0x96, 0x42, 0x31, 0x54, 0x80, 0x59, 0x31, 0xfc, 0x2d, 0x07, 0x8a, 0x2b, 0xa5, 0xd5, 0xfa, 0x38,
	0x80, 0xf6, 0x4f, 0xe0, 0xd8, 0x8c, 0xe5, 0x88, 0xac, 0xa7, 0x40, 0xee, 0xc1, 0xcb, 0x86, 0x63,
	0x97, 0x06, 0x54, 0x34, 0x59, 0xcd, 0x4f, 0xf0, 0x1a, 0x98, 0xc0, 0x2b, 0xb3, 0x62, 0x4b, 0x7f,
	0x09, 0x66, 0xb4, 0xd4, 0x34, 0x30, 0xb2, 0xd5, 0x7a, 0x74, 0xc0, 0x25, 0x9b, 0xbf, 0xcf, 0xf4,
	0xe0, 0xde, 0x9a, 0x85, 0xc3, 0x6a, 0xe7, 0x61, 0x9a, 0x7b, 0x36, 0x39, 0xcd, 0x3d, 0xfc, 0x14,
	0x5e, 0x9d, 0xcb, 0xb4, 0xd6, 0xf7, 0xe1, 0x59, 0x1b, 0x32, 0xf9, 0x6b, 0x15, 0x4c, 0x16, 0x8e,
	0x14, 0x19, 0x8a, 0x87, 0x12, 0xfc, 0xc2, 0x22, 0x54, 0x83, 0x60, 0x06, 0x61, 0xba, 0xb5, 0xe0,
	0xbf, 0x5b, 0xfb, 0x15, 0x58, 0xf6, 0xc9, 0x12, 0x27, 0xb1, 0xaf, 0x24, 0x64, 0x3f, 0xb5, 0xa6,
	0x57, 0xbe, 0x67, 0x60, 0xc6, 0x20, 0xa2, 0x1f, 0x00, 0x5e, 0x9c, 0x1d, 0x41, 0x74, 0x67, 0x09,
	0xd4, 0xb2, 0x0d, 0xca, 0xdf, 0x4d, 0x2e, 0x8c, 0xe8, 0xf0, 0xce, 0xbb, 0x5f, 0x7f, 0x3f, 0xa5,
	0x6f, 0xa1, 0x9b, 0xee, 0x58, 0x36, 0xf9, 0x69, 0xf7, 0x79, 0x9a, 0xf3, 0x33, 0x80, 0xd9, 0xd1,
	0xe8, 0xa1, 0xdb, 0x71, 0xc5, 0x67, 0x47, 0x3c, 0x5f, 0x4e, 0xa0, 0xb0, 0x9c, 0xdb, 0x86, 0x73,
	0x03, 0xad, 0x2f, 0xe1, 0x6c, 0x8c, 0x90, 0xbe, 0x81, 0x51, 0xbf, 0x51, 0x6c, 0xb1, 0xb9, 0xa5,
	0xc8, 0x57, 0x92, 0x48, 0x2c, 0xa0, 0x6b, 0x00, 0x6f, 0xa0, 0xcd, 0x98, 0x87, 0xd4, 0x2c, 0x74,
	0xdf, 0x70, 0xef, 0x2d, 0xfa, 0x02, 0x20, 0xb4, 0x26, 0xd5, 0x20, 0x88, 0xc7, 0x9c, 0x5b, 0x9c,
	0x78, 0xcc, 0xf9, 0x45, 0xc0, 0x5b, 0x06, 0x73, 0x1d, 0xe1, 0x78, 0xcc, 0xdd, 0xbd, 0x9f, 0x3d,
	0x07, 0x1c, 0xf7, 0x1c, 0xf0, 0xa7, 0xe7, 0x80, 0x8f, 0x7d, 0x27, 0x75, 0xdc, 0x77, 0x52, 0xbf,
	0xfb, 0x4e, 0xea, 0xd9, 0x76, 0x8b, 0xeb, 0x83, 0x6e, 0x83, 0x34, 0x65, 0xb8, 0xc0, 0xe7, 0xb5,
	0x71, 0xd2, 0x47, 0x6d, 0xa6, 0x1a, 0x67, 0xcc, 0xff, 0xc0, 0xce, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0x89, 0x28, 0x76, 0x93, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of NftListOfOwner items.
	NftIdListOfOwner(ctx context.Context, in *QueryNftIdListOfOwnerRequest, opts ...grpc.CallOption) (*QueryNftIdListOfOwnerResponse, error)
	// Queries a list of balanceOf items.
	BalanceOf(ctx context.Context, in *QueryBalanceOfRequest, opts ...grpc.CallOption) (*QueryBalanceOfResponse, error)
	// Queries a nftItem by id.
	NftItem(ctx context.Context, in *QueryGetNftItemRequest, opts ...grpc.CallOption) (*QueryGetNftItemResponse, error)
	// Queries a list of nftItem items.
	NftItemAll(ctx context.Context, in *QueryAllNftItemRequest, opts ...grpc.CallOption) (*QueryAllNftItemResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) NftIdListOfOwner(ctx context.Context, in *QueryNftIdListOfOwnerRequest, opts ...grpc.CallOption) (*QueryNftIdListOfOwnerResponse, error) {
	out := new(QueryNftIdListOfOwnerResponse)
	err := c.cc.Invoke(ctx, "/firmachain.firmachain.nft.Query/NftIdListOfOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceOf(ctx context.Context, in *QueryBalanceOfRequest, opts ...grpc.CallOption) (*QueryBalanceOfResponse, error) {
	out := new(QueryBalanceOfResponse)
	err := c.cc.Invoke(ctx, "/firmachain.firmachain.nft.Query/BalanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftItem(ctx context.Context, in *QueryGetNftItemRequest, opts ...grpc.CallOption) (*QueryGetNftItemResponse, error) {
	out := new(QueryGetNftItemResponse)
	err := c.cc.Invoke(ctx, "/firmachain.firmachain.nft.Query/NftItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftItemAll(ctx context.Context, in *QueryAllNftItemRequest, opts ...grpc.CallOption) (*QueryAllNftItemResponse, error) {
	out := new(QueryAllNftItemResponse)
	err := c.cc.Invoke(ctx, "/firmachain.firmachain.nft.Query/NftItemAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of NftListOfOwner items.
	NftIdListOfOwner(context.Context, *QueryNftIdListOfOwnerRequest) (*QueryNftIdListOfOwnerResponse, error)
	// Queries a list of balanceOf items.
	BalanceOf(context.Context, *QueryBalanceOfRequest) (*QueryBalanceOfResponse, error)
	// Queries a nftItem by id.
	NftItem(context.Context, *QueryGetNftItemRequest) (*QueryGetNftItemResponse, error)
	// Queries a list of nftItem items.
	NftItemAll(context.Context, *QueryAllNftItemRequest) (*QueryAllNftItemResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) NftIdListOfOwner(ctx context.Context, req *QueryNftIdListOfOwnerRequest) (*QueryNftIdListOfOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftIdListOfOwner not implemented")
}
func (*UnimplementedQueryServer) BalanceOf(ctx context.Context, req *QueryBalanceOfRequest) (*QueryBalanceOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOf not implemented")
}
func (*UnimplementedQueryServer) NftItem(ctx context.Context, req *QueryGetNftItemRequest) (*QueryGetNftItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftItem not implemented")
}
func (*UnimplementedQueryServer) NftItemAll(ctx context.Context, req *QueryAllNftItemRequest) (*QueryAllNftItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftItemAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_NftIdListOfOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftIdListOfOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftIdListOfOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.firmachain.nft.Query/NftIdListOfOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftIdListOfOwner(ctx, req.(*QueryNftIdListOfOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.firmachain.nft.Query/BalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceOf(ctx, req.(*QueryBalanceOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.firmachain.nft.Query/NftItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftItem(ctx, req.(*QueryGetNftItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftItemAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftItemAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firmachain.firmachain.nft.Query/NftItemAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftItemAll(ctx, req.(*QueryAllNftItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "firmachain.firmachain.nft.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NftIdListOfOwner",
			Handler:    _Query_NftIdListOfOwner_Handler,
		},
		{
			MethodName: "BalanceOf",
			Handler:    _Query_BalanceOf_Handler,
		},
		{
			MethodName: "NftItem",
			Handler:    _Query_NftItem_Handler,
		},
		{
			MethodName: "NftItemAll",
			Handler:    _Query_NftItemAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft/query.proto",
}

func (m *QueryNftIdListOfOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftIdListOfOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftIdListOfOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftIdListOfOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftIdListOfOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftIdListOfOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftIdList) > 0 {
		dAtA4 := make([]byte, len(m.NftIdList)*10)
		var j3 int
		for _, num := range m.NftIdList {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftItem != nil {
		{
			size, err := m.NftItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftItem) > 0 {
		for iNdEx := len(m.NftItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryNftIdListOfOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftIdListOfOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftIdList) > 0 {
		l = 0
		for _, e := range m.NftIdList {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	return n
}

func (m *QueryGetNftItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetNftItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftItem != nil {
		l = m.NftItem.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftItem) > 0 {
		for _, e := range m.NftItem {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryNftIdListOfOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftIdListOfOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftIdListOfOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftIdListOfOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftIdListOfOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftIdListOfOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NftIdList = append(m.NftIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NftIdList) == 0 {
					m.NftIdList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NftIdList = append(m.NftIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIdList", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftItem == nil {
				m.NftItem = &NftItem{}
			}
			if err := m.NftItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftItem = append(m.NftItem, &NftItem{})
			if err := m.NftItem[len(m.NftItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
