syntax = "proto3";
package firmachain.firmachain.token;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "token/token_data.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/firmachain/firmachain/x/token/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a tokenData by index.
	rpc TokenData(QueryGetTokenDataRequest) returns (QueryGetTokenDataResponse) {
		option (google.api.http).get = "/firmachain/firmachain/token/tokenData/{tokenID}";
	}

	// Queries a list of tokenData items.
	rpc TokenDataAll(QueryAllTokenDataRequest) returns (QueryAllTokenDataResponse) {
		option (google.api.http).get = "/firmachain/firmachain/token/tokenData";
	}

// Queries a list of getTokenList items.
	rpc GetTokenList(QueryGetTokenListRequest) returns (QueryGetTokenListResponse) {
		option (google.api.http).get = "/firmachain/firmachain/token/getTokenList";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetTokenDataRequest {
	  string tokenID = 1;

}

message QueryGetTokenDataResponse {
	TokenData tokenData = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenDataRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenDataResponse {
	repeated TokenData tokenData = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenListRequest {
  string ownerAddress = 1;
}

message QueryGetTokenListResponse {
	repeated string tokenID = 1;
}

// this line is used by starport scaffolding # 3
